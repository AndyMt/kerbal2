use { Vessel, Targetable } from ksp::vessel
use { Orbit } from ksp::orbit
use { GeoCoordinates, find_body, Body } from ksp::orbit
use { sleep, current_time, wait_until, yield } from ksp::game
use { CONSOLE } from ksp::console

use { acos_deg, clamp, sqrt, PI, min, max, abs } from core::math
use { format } from core::str

use { warning, panic, pretty_distance, pretty_time, pretty_dt } from glib::display
use { Mission } from glib::mission

pub struct Universe() {
    KERBOL  : Body = find_body("Kerbol").value
    KERBIN  : Body = find_body("Kerbin").value
    MUN     : Body = find_body("Mun").value
    MINIMUS : Body = find_body("Minimus").value
}

pub struct Location(body_name : string, latitude : float, longitude : float ) {
    body_name : string = body_name
    latitude  : float = latitude
    longitude : float = longitude
}

// Class that encapsulates all the locations we care about

pub struct Locations() {
    KerbalSpaceCenter : Location = Location("Kerbin",0,-74.8296)
    LaunchPad1 :        Location = Location("Kerbin",-0.4265,-74.8297)
    LaunchPad2 :        Location = Location("Kerbin",-0.2418,-74.9860)
    LandingPad1 :       Location = Location("Kerbin",-0.5512,-74.9110)
}

impl Location {

    fn geoCoordinates(self) -> GeoCoordinates = {
        const body_maybe = find_body(self.body_name)
        const body = body_maybe.value
        return body.geo_coordinates(self.latitude,self.longitude)
    }
}

sync pub fn rad2deg(r: float) -> float = {
    return r*180.0/PI
}

sync pub fn deg2rad(d: float) -> float = {
    return d/180.0*PI
}

// Return degrees in the range 0-360
sync pub fn deg360(d: float) -> float = {
    return (d+3600.0) % 360
}

pub fn angle_diff(a: float, b: float) -> float = {
    return (a - b + 180 + 720) % 360 - 180
}

// Calculate the distance between two targetables at time t
pub fn find_distance_t(t1: Targetable, t2: Targetable, t: float) -> float = {
    const p1 = t1.orbit.global_position(t)
    const p2 = t2.orbit.global_position(t)
    return p1.distance(p2)
}

pub fn find_distance(t1: Targetable, t2: Targetable) -> float = {
    return find_distance_t(t1,t2,current_time())
}

// Find the earliest time when two targtables come within a certain distance
// - Uses gradient descent
// - Returns time to closest encounter if it can't go below distance
pub fn find_encounter(t1: Targetable, t2: Targetable, distance: float) -> float = {
    const speed = 0.01
    let i = 0
    let t = current_time()
    let dx = 1.0
    let d_best = distance+1
    while( dx > 0 && d_best > distance) {
        i += 1
        const d_now = find_distance_t(t1,t2,t)
        dx = d_now-find_distance_t(t1,t2,t+1)
        if(dx > 0) {
            t = t+d_now/dx*speed
        }
        d_best = find_distance_t(t1,t2,t)
        //const s = format("{0,4:N0} {1} in {2}",(i,pretty_distance(d_best), pretty_dt(t)))
        //warning(s)
    }

    return t
}

// Find the center longitude of the sunny side of the planet in Kerbol system

pub fn lon_sunny_side(mission : Mission) -> float = {
    const vessel = mission.vessel
    const body = vessel.main_body
    const frame = vessel.main_body.celestial_frame

    // Find a good spot. First, find the day side of the body
    const v_kerbol = mission.universe.KERBOL.global_position
    const v_body   = body.global_position
    const v_vessel = vessel.global_position
    
    // Calculate the angle between the two vectors Kerbol->Kerbin and Kerbol->Vessel
    const d_kerbol = (v_kerbol-v_body).normalized
    const d_vessel = (v_vessel-v_body).normalized

    const dl_kerbol = d_kerbol.to_local(frame)
    const dl_vessel = d_vessel.to_local(frame)

    //let vvv1 = DEBUG.add_vector(fn() -> v_vessel, fn() -> d_kerbol*50, RED, "Kerbol", 1)
    //let vvv2 = DEBUG.add_vector(fn() -> v_vessel, fn() -> d_vessel*50, GREEN, "Vessel", 1)            

    // Now we can calculate the angle to the point facing Kerbol (and having best light)
    const angle = dl_kerbol.angle_to(dl_vessel)
    
    // Next, are we moving towards that point or away?
    const vl_vessel = vessel.global_velocity.to_local(frame)
    const direction = vl_vessel.dot(dl_kerbol)

    // Correct relative if we are moving away from it
    let angle_max_sun = angle
    if (direction < 0) {
        angle_max_sun = 360-angle
    }
    return (angle_max_sun+vessel.geo_coordinates.longitude + 720) % 360
}

// Find a nice landing spot, meaning:
// 1. Daylight
// 2. Ideally at the space center
// 3. Not in water

pub fn lat_nice_spot(mission : Mission) -> float = {
    const vessel = mission.vessel
    const con = mission.console.value
    const body = vessel.main_body
    const sun_zenith = lon_sunny_side(mission)
    let long = 0.0

    let delta_to_ksp = abs( angle_diff(mission.locations.KerbalSpaceCenter.longitude, sun_zenith) )
    con.log(format("{0} {1} {2}", (delta_to_ksp, mission.locations.KerbalSpaceCenter.longitude, sun_zenith )))
    if (delta_to_ksp < 90 && body.name == "Kerbin") {
        con.log("Kerbal Space Center has daylight, landign there.")
        return mission.locations.KerbalSpaceCenter.longitude
    }

    for(i in 0..90) {
        long = sun_zenith-i % 360
        if (body.terrain_height(0, long) > 50) {
            return long
        }
        long = sun_zenith+i % 360
        if (body.terrain_height(0, long) > 50) {
            return long
        }
    }

    return sun_zenith
}

// Find the type or the currently active engine

pub fn active_engine_type(vessel: Vessel) -> ksp::vessel::EngineType = {
    for(engine in vessel.engines)
        if(engine.has_ignited) 
            return engine.current_engine_mode.engine_type
    return ksp::vessel::EngineType.Generic
}

// Simple function that checks if the current stage is a solid state booster
// If yes, wait for it to finish burning and stage

pub fn check_and_finish_ssb(mission: Mission) -> Unit = {

    const vessel = mission.vessel
    const con = mission.console.value

    // Check if current engines are boosters
    if (active_engine_type(vessel) != ksp::vessel::EngineType.SolidBooster) return

    for(engine in vessel.engines)
        if(engine.has_ignited) {
            con.log("  waiting for solid state boosters to finish burning.")
            wait_until(fn() -> engine.is_flameout == true)
            con.log("  burn complete, staging.")
            mission.stage()
            return
        }
}