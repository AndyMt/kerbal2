//
// Maneuver functions
//

use { Vessel, AutopilotMode, VesselSituation, DeltaVSituation  } from ksp::vessel
use { Body, Orbit, GeoCoordinates } from ksp::orbit
use { vec2, vec3, Vec3, look_dir_up, global_look_dir_up } from ksp::math
use { RED, GREEN, BLUE } from ksp::console
use { sleep, current_time, wait_until, yield } from ksp::game
use { warp_to } from ksp::game::warp
use { DEBUG } from ksp::debug

use { acos_deg, clamp, sqrt, PI, min, max, exp, log, abs } from core::math
use { format } from core::str

use { Mission } from glib::mission
use { pretty_time, pretty_dt, pretty_distance, warning, panic } from glib::display
use { deg360 } from glib::utility

// Land a vessel at a given landing site. Ignores athmosphere.

pub fn land_vessel(mission: Mission, landing_site: GeoCoordinates) -> Unit = {

    const alt_tar = 200 // Altitude at which we try to stop
    const precision = 10 // Precision of the landing spot
    const vessel = mission.vessel
    const con = mission.console.value
    const body = vessel.main_body
    const cele_frame = vessel.main_body.celestial_frame
    const body_frame = vessel.main_body.body_frame

    const g = body.grav_parameter / (body.radius*body.radius)
    const maxthrust = vessel.available_thrust

    // Landing site is fixed in the body's rotating frame
    const landing_site_alt = body.terrain_height(landing_site.latitude, landing_site.longitude)
    const landing_site_pos = body.global_surface_position(landing_site.latitude, landing_site.longitude, landing_site_alt).to_local(body_frame)
    let al = vessel.altitude_sealevel - landing_site_alt
    let t0 = current_time()

    let delta_v = vec3(0,0,0)
    let dv_debug = DEBUG.add_vector(fn() -> vessel.global_position, fn() -> vec3(0,0,0).to_global(body_frame), RED, "DeltaV", 1)
    let dx_debug = DEBUG.add_vector(fn() -> vessel.global_position, fn() -> vec3(0,0,0).to_global(body_frame), GREEN, "To Site", 1)
    let dd_debug = DEBUG.add_vector(fn() -> vessel.global_position, fn() -> vec3(0,0,0).to_global(body_frame), BLUE, "Param 3", 1)

    if (mission.debug) {
        let land_debug = DEBUG.add_ground_marker(landing_site, GREEN, 0)
        let ground_debug = DEBUG.add_ground_marker(vessel.geo_coordinates, RED, 0)
    } else {
        dv_debug.remove()
        dx_debug.remove()
        dd_debug.remove()
    }

    vessel.autopilot.mode = AutopilotMode.Navigation

    while (al > alt_tar) {
        let status = "Unknown status"
        let mod = 0
        let thr_mm = 1.0

        const a_max = maxthrust / vessel.mass  
        const up_vec = vessel.global_up.to_local(body_frame)

        // recalculate altitude and distance to landing site
        al = vessel.altitude_sealevel - landing_site_alt
        const vessel_vec = vessel.global_position.to_local(body_frame)
        const dx_vec = landing_site_pos-vessel_vec
        const v_vec  = vessel.global_velocity.to_local(body_frame)

        // Calculate vertical velocity (vv) and horizontal and vertical velocity vectors
        const vv = v_vec.dot(up_vec)

        const hv_vec = v_vec - v_vec.dot(up_vec)*up_vec
        const vv_vec = v_vec - hv_vec

        // Time to impact and time until we want to have stopped (which includes a safety margin)
        const t_left = vv/g + sqrt( (2*al/g) + (vv/g)*(vv/g) )
        const t_left_stop = vv/g + sqrt( (2*max(al-alt_tar,0)/g) + (vv/g)*(vv/g) )

        //const ts = format("{0:N1} {1:N1} {2:N1} {3:N1}", 
        //              (vv,al,t_left, sqrt(vv*vv+2*(max(al,0))*g) ) )
        //con.log(ts)

        // Calculate target velocity that would make us hit the target 
        let v_target_vec = dx_vec*(1/t_left)
        
        // Correct by the fact that we want to have v=0 at al=0
        // Split into horizontal and vertical
        const hv_target_vec = v_target_vec - v_target_vec.dot(up_vec)*up_vec
        let vv_target_vec = v_target_vec - hv_target_vec

        // Define velocity goal
        const vv_goal = t_left_stop*a_max
        
        // If vertical speed exceeds target, correct it to target
        if (vv_target_vec.magnitude > vv_goal) 
          vv_target_vec = vv_target_vec.normalized*vv_goal        
        
        v_target_vec = hv_target_vec + vv_target_vec
                          
        // Burn is the difference between velocities.
        delta_v = v_target_vec-v_vec
                
        if (delta_v.dot(up_vec) < 0 || vv_goal > vv_target_vec.magnitude) {
          // Make sure we never steer up and we don't brake befor necessary.
          status = "horizontal mode"
          delta_v = delta_v - delta_v.dot(up_vec)*up_vec
          mod = 0
        } else {
          status = "vertical mode"
          mod = 1
        }
      
        // Dampen small corrections      
        if ( delta_v.magnitude < 1 )
          thr_mm = 0.1

        const delta_a = delta_v.angle_to(vessel.global_facing.to_local(body_frame).vector)
        if (  delta_a > 10 && mod == 0 ) {
            // Too far off, don't burn yet.
            thr_mm = 0
            status = format("turn da {0:N1}", delta_a )
        }

        // Steer against delta_v.
        // For some reason the math only works with the global frame but fails if we do the math in the body frame

        // For the last 30 seconds, keep the vessel upright
        let steering_v = delta_v.normalized
        if(t_left_stop < 20) {
          const f = clamp(20.0/t_left_stop,0.1,0.9)
          steering_v = ((1-f)*up_vec + f*delta_v.normalized).normalized
          status = "upright mode"
        }

        const steering_direction = global_look_dir_up(steering_v.to_global(body_frame).normalized, vessel.global_facing.up_vector).vector
        vessel.autopilot.global_target_orientation = steering_direction

        // Set throttle to time it takes to normalize delta_v        
        const throttle = thr_mm*max(min(1.0,1*(delta_v.magnitude)/(a_max-g)),0)
        vessel.set_throttle(throttle)

        const ct = current_time()
        if (ct-t0 > 0.5) { 
          con.h3 = format("retro: {0,-15}  dst: {1,-10}  v: {2:N1} / {3:N1}  dv_v: {4:N1}  dv: {5:N1} ", 
                      (status, pretty_distance(dx_vec.magnitude), vv, vv_goal, delta_v.dot(up_vec), delta_v.magnitude ) )

          con.h4 = format("throttle: {0:P}  t_crash: {1}  alt: {2} vs {3}",
                      (throttle, pretty_time(t_left), pretty_distance(al), pretty_distance(alt_tar) ) )

          con.h5 = format("hv/vv: {0:N1} / {1:N1}   target hv/dvv: {2:N1} / {3:N1}",
                      (hv_vec.magnitude, vv_vec.magnitude, hv_target_vec.magnitude, vv_target_vec.magnitude ) )
          t0 = ct
          con.update()
        }

        const delta_v_c = delta_v
        if( mission.debug) {
            dv_debug.set_vector_provider(fn() -> 3*(delta_v_c.to_global(body_frame)))
            dx_debug.set_vector_provider(fn() -> 1*(dx_vec.to_global(body_frame)))
            dd_debug.set_vector_provider(fn() -> 3*(v_vec.to_global(body_frame)))
        }
        sleep(0.1)
    }

    // We are now at the target altitude. Hover to the right spot and land.
    // Basic idea is to move to the exact target, and then slowly reduce altitude.
    // It turns out we can't trust the terrain height of the landing site, so from 
    // here on we use the vessel altitude.

    con.h5 = ""

    while (vessel.situation != VesselSituation.Landed && vessel.situation != VesselSituation.Splashed) {
        let status = "Hover ???"

        al = vessel.altitude_scenery

        const a_max = maxthrust / vessel.mass  
        const up_vec = vessel.global_up.to_local(body_frame)

        // vector to landing site, vertical and horizontal components
        const vessel_vec = vessel.global_position.to_local(body_frame)
        const dx_vec = landing_site_pos-vessel_vec
        const dx_vec_v = dx_vec.dot(up_vec)*up_vec
        const dx_vec_h = dx_vec - dx_vec_v

        // Vessel velocity, vertical and horizontal components
        const v_vec  = vessel.global_velocity.to_local(body_frame)
        const v_vec_v = v_vec.dot(up_vec)*up_vec
        const v_vec_h = v_vec -v_vec_v

        // Hover towards goal at 1m/s
        const h_speed = min(sqrt(dx_vec_h.magnitude),dx_vec_h.magnitude/10)
        let v_vec_h_goal = dx_vec_h.normalized*h_speed

        // If alt < distance to site, descend. Otherwise, hover.
        let v_vec_v_goal = vec3(0,0,0)
        const descent_speed = clamp(al*2,1,10)
        if (al < min(al,precision)) {
            status = "hover descend"
            v_vec_v_goal = -up_vec*descent_speed
            v_vec_h_goal = v_vec_h_goal*0.2
        } else {
          status = "hover horizontal"
          if (al > min(al,precision)) {
            v_vec_v_goal = -up_vec*descent_speed/2
          } else {
            v_vec_v_goal = up_vec
          }
        }
        
        const v_vec_goal = v_vec_h_goal + v_vec_v_goal
                          
        // Burn is the difference between velocities.
        delta_v = v_vec_goal-v_vec

        // Steer against delta_v.
        const steering_vec = (0.9*up_vec + 0.1*delta_v.normalized).normalized
        const steering_direction = global_look_dir_up(steering_vec.to_global(body_frame).normalized, vessel.global_facing.up_vector).vector
        vessel.autopilot.global_target_orientation = steering_direction

        // Set throttle to hover plus delta_v, but only if we are not going up
        let throttle = 0.0
        if (v_vec.dot(up_vec) < 0) {
          const throttle_adjust = (delta_v.dot(up_vec))/(a_max-g)
          const throttle_base = g/a_max
          throttle = clamp(throttle_base+throttle_adjust, 0, 1)
        }      
        vessel.set_throttle(throttle)

        const ct = current_time()
        if (ct-t0 > 0.5) { 
          con.h3 = format("status: {0} altitude: {1:N1} distance: {2:N.1} ", 
                      (status, pretty_distance(al), pretty_distance(dx_vec_h.magnitude) ) )

          con.h4 = format("throttle: {0:P} v_vert: {1:N1} delta_v: {2:N1} delta_v_y: {3:N1}",
                      (throttle, v_vec.dot(up_vec), delta_v.magnitude, delta_v.dot(up_vec) ) )

          t0 = ct
          con.update()
        }

        const delta_v_c = delta_v
        if( mission.debug) {
            dv_debug.set_vector_provider(fn() -> 3*(delta_v_c.to_global(body_frame)))
            dx_debug.set_vector_provider(fn() -> 1*(dx_vec.to_global(body_frame)))
            dd_debug.set_vector_provider(fn() -> 3*(steering_vec.to_global(body_frame)))
        }
        sleep(0.1)
    }

    vessel.set_throttle(0)
    vessel.autopilot.mode = AutopilotMode.Prograde
}