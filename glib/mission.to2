//
// Base class to carry all mission state
//

use { Vessel, VesselSituation, AutopilotMode } from ksp::vessel
use { sleep, current_time, wait_until } from ksp::game
use { warp_to } from ksp::game::warp
use { CONSOLE } from ksp::console
use { format } from core::str
use { warning, panic } from glib::display

pub struct Mission(mission_name : string, myvessel: Vessel) {
    // Subcomponents
    console : Option<glib::display::Display> = glib::display::Display_None()

    // Mission Parameters
    name : string = mission_name
    vessel : Vessel = myvessel
    start_time : float = 0.0

    // Stage parameters for easy access
    stage : int = 0
    stage_count : int = 999
    stage_fuel : float = 0.0
    stage_eng_c : int = 0
}

pub sync fn Mission_None() -> Option<glib::mission::Mission> = {
    return None()
}

impl Mission {

    // Return text desctiption of the mission
    fn to_string(self)-> string = { 
        self.name
    }

    // Check if all engines have flamed out.
    sync fn flameout(self) -> bool = {
        for(engine in self.vessel.engines)
            if(engine.has_ignited && !engine.is_flameout) return false
        return true 
    }

    // Check if we have landed or splashed down
    sync fn landed(self) -> bool = {
        if (self.vessel.situation != VesselSituation.Landed && self.vessel.situation != VesselSituation.Splashed) return false
        return true
    }

    // Update internal data on staging
    fn new_stage(self) -> Unit = {
        
        let vessel = self.vessel
        let con  = self.console.value
        self.stage = vessel.staging.count
        
        // Stage info
        let dv = vessel.delta_v.stage(vessel.staging.current)
        self.stage_fuel = 0
        if (dv.defined) {
            self.stage_fuel = dv.value.fuel_mass
	        let eng = dv.value.engines
            self.stage_eng_c = eng.length            
        }

        let s =  format("stage: {0}/{1}    {3} eng, {2:N2}t fuel", (self.stage, self.stage_count, self.stage_fuel, 
		    self.stage_eng_c))
        con.log(s)
    }

    fn clearNodes(self) -> Unit = {
        while(self.vessel.maneuver.nodes.length > 0) {
            self.vessel.maneuver.nodes[0].remove()
        }
    }

    fn burnNextNode(self, ap_lock: bool) -> Unit = {
        let con  = self.console.value
        let vessel = self.vessel
        const node_result = vessel.maneuver.next_node()

        if (!node_result.success) {
            warning("Called burn_node with no maneuver node set.")
            return
        }

        const node = node_result.value
        const target_orbit = node.expected_orbit
        const frame = vessel.main_body.celestial_frame
        const t_end = node.time + node.burn_duration

        // Need code here to orient vessel first
        // Need code to warp
        wait_until(fn() -> node.ETA <= 15)
        vessel.autopilot.enabled = true
        vessel.autopilot.mode = AutopilotMode.Maneuver
        sleep(10)
        wait_until(fn() -> node.ETA <= 0.2)

        // Maneuver nodes seem a bit broken right now. Lock direction if needed.
        if (ap_lock)
            vessel.autopilot.mode = AutopilotMode.StabilityAssist

        let t = current_time()

        while (t < t_end) {
            t = current_time()
            vessel.set_throttle(1)
            sleep(0.2)
            con.update_slow()
        }

        vessel.set_throttle(0)
        vessel.autopilot.mode = AutopilotMode.Prograde
        node.remove()
    }

    // Start a Mission. Save time stamp.
    fn start(self) -> glib::display::Display = {

        if (self.start_time > 1) {
            CONSOLE.print_line("*** ERROR: mission.start() called twice!")
            sleep(1)
            return self.console.value
        }
        let vessel = self.vessel

        // Create a Console
        self.console = glib::display::Display()
        let con = self.console.value
        con.start(self)

        // Set up mission parameters
        self.start_time = current_time()
        self.stage_count = self.vessel.staging.total_count
        self.new_stage()
        con.log("autopilot: "+self.vessel.autopilot.enabled.to_string() + " " + self.vessel.autopilot.mode.to_string())

        // Some vessel configuration
        vessel.autopilot.enabled = true
        vessel.autopilot.mode = AutopilotMode.Prograde
        vessel.actions.light = true

        // Return the console
        return con
    }

    fn end(self) -> Unit = {
        let con  = self.console.value
        let t = glib::display::pretty_time(current_time()-self.start_time)
        let s = format("{0} ended after {1} s", (self.name,t))
        con.log(s)
    }

    fn stage(self)-> Unit = {
        sleep(0.5)
        self.vessel.staging.next()
        sleep(0.5)
        self.new_stage()
        sleep(0.5)
    }
}

