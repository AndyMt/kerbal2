//
// Base class to carry all mission state
//

use { Vessel, VesselSituation, AutopilotMode, DeltaVSituation } from ksp::vessel
use { sleep, current_time, wait_until } from ksp::game
use { GeoCoordinates, find_body, Body } from ksp::orbit
use { warp_to } from ksp::game::warp
use { CONSOLE } from ksp::console

use { acos_deg, clamp, sqrt, PI, min, max, abs } from core::math
use { format } from core::str

use { warning, panic, pretty_time, pretty_dt, pretty_distance, Display, Display_None } from glib::display
use { Node, ErrorNode, burnNextNodeVac } from glib::maneuver_vacuum
use { burnNextNodeAtm } from glib::maneuver_atmosphere
use { Universe, Locations, find_encounter, find_distance_t, find_distance } from glib::utility

pub struct Mission(mission_name : string, myvessel: Vessel) {

    // Subcomponents
    console : Option<Display> = Display_None()

    // Global Variables
    universe : Universe = Universe()
    locations : Locations = Locations()

    // Mission Parameters
    name : string = mission_name
    vessel : Vessel = myvessel
    start_time : float = 0.0

    // Stage parameters for easy access
    stage : int = 0
    stage_count : int = 999
    stage_fuel : float = 0.0
    stage_eng_c : int = 0
    stage_thrust : float = 0
    stage_delta_v : float = 0
}

pub sync fn Mission_None() -> Option<Mission> = {
    return None()
}

impl Mission {

    // Return text desctiption of the mission
    fn to_string(self)-> string = { 
        self.name
    }

    // Check if all engines have flamed out.
    sync fn flameout(self) -> bool = {
        for(engine in self.vessel.engines)
            if(engine.has_ignited && !engine.is_flameout) return false
        return true 
    }

    // Check if we have landed or splashed down
    sync fn landed(self) -> bool = {
        if (self.vessel.situation != VesselSituation.Landed && self.vessel.situation != VesselSituation.Splashed) return false
        return true
    }

    // Step through all the stages, return # of stages with engines
    fn check_stages(self) -> int = {
        
        const vessel = self.vessel
        const con  = self.console.value
        let stage = vessel.staging.count
        let eng_stages = 0
        let eng_name = ""

        con.log(format("Checking {0} stages:",stage))

        while(stage >0 ) {
            stage -= 1

            const maybe_stage_info = vessel.delta_v.stage(stage)
            if(!maybe_stage_info.defined) continue

            const stage_info = maybe_stage_info.value
            const deltav = stage_info.get_deltav(DeltaVSituation.Vaccum)
            const thrust = stage_info.get_thrust(DeltaVSituation.Vaccum)
            const mass = stage_info.start_mass
            const fuel = stage_info.fuel_mass
            const eng_c = stage_info.active_engines.length
            if( eng_c > 0) {
                eng_stages = eng_stages+1
                eng_name = eng_c.to_string()+" x ("+stage_info.active_engines[0].engine_module.part_name+")"
            } else {
                eng_name = ""
            }

            let s =  format("    {0} dv: {1,5:N0} m/s  mass: {2,4:N1} t  T/W: {3,4:N1}    {4}", 
                            (stage, deltav, mass, thrust/mass, eng_name))
            con.log(s)
        }
    
        con.log(format("Total {0} stages with engines.",eng_stages))
        return eng_stages
    }

    // Update internal data on staging
    fn new_stage(self, log_this: bool) -> Unit = {

        const vessel = self.vessel
        const con  = self.console.value      

        self.stage = vessel.staging.count-1
        self.stage_fuel = 0
        self.stage_thrust = 0 
        self.stage_eng_c = 0
        self.stage_delta_v = 0
        let eng_c = 0
        let eng_name = ""
    
        // Store some useful parameters in the mission sturct

        const maybe_stage_info = vessel.delta_v.stage(self.stage)
        if(maybe_stage_info.defined) {
            const stage_info = maybe_stage_info.value // Type: StageDeltaV
            self.stage_delta_v = stage_info.get_deltav(DeltaVSituation.Vaccum)
            self.stage_thrust = stage_info.get_thrust(DeltaVSituation.Vaccum)
            self.stage_fuel = stage_info.fuel_mass
            self.stage_eng_c = stage_info.engines.length
            eng_c = stage_info.active_engines.length
            if( eng_c > 0) {
                eng_name = eng_c.to_string()+" x "+stage_info.active_engines[0].engine_module.part_name
            }       
        } else {
            panic("Can't get stage info for current stage.")
        }

        let s =  format("  stage:  {0} dv: {1,5:N0} m/s  mass: {2,4:N1} t  T/W: {3,4:N1}    {4}", 
                        (vessel.staging.current, self.stage_delta_v, vessel.mass, self.stage_thrust/vessel.mass, eng_name))
        if (log_this) con.log(s)
    }

    fn addManeuver(self, n: Node) -> Unit = {
        const burn_time = n.estBurnTime(self.vessel)
        self.vessel.maneuver.add_burn_vector(n.time - burn_time/2, n.delta_v)
        self.console.value.log("Planned maneuver: "+n.to_string()+"  burn: "+pretty_time(burn_time))
    }

    fn clearNodes(self) -> Unit = {
        while(self.vessel.maneuver.nodes.length > 0) {
            self.vessel.maneuver.nodes[0].remove()
        }
    }

    // Burn next node for an atmospheric ascent to a specific apoapsis
    fn burnNextNodeAtm(self, target_apoapsis: float) -> Unit = {
        burnNextNodeAtm(self, target_apoapsis)
    }

    // Normal function to burn the next node 
    fn burnNextNode(self) -> Unit = {
        burnNextNodeVac(self)
    }

    // Warp to the SOI change. This is surprisingly hard.
    fn warpToSOI(self, dst: string) -> Unit = {
        const vessel = self.vessel
        const con = self.console.value
        const body_dst = find_body(dst).value

        con.log("Warping to SOI")

        let t = find_encounter(vessel, body_dst, body_dst.SOI_radius*0.9)
        let d = find_distance_t(vessel, body_dst, t)

        con.log(format("  encounter in {0} distance {1}", (pretty_distance(d),pretty_dt(t))))

        warp_to(t)
        con.h5 = ""

        while(current_time()<t && vessel.orbit.reference_body.name != dst) {
            con.h4 = format("dst: {0} / POI {1}  ({2:P1})", (pretty_distance(d), pretty_distance(body_dst.SOI_radius), d/body_dst.SOI_radius))
            con.update1()
        }

        if(vessel.orbit.reference_body.name == dst) {
            d = find_distance(vessel, body_dst)
            con.log(format("  arrived {0:P1} of SOI {1:N0} m/{2:N0} m", (d/body_dst.SOI_radius, pretty_distance(d), pretty_distance(body_dst.SOI_radius))))
        } else {
            panic("warp failed, missed target.")
        }
    }

    // Start a Mission. Save time stamp.
    fn start(self) -> glib::display::Display = {

        if (self.start_time > 1) {
            CONSOLE.print_line("*** ERROR: mission.start() called twice!")
            sleep(1)
            return self.console.value
        }
        let vessel = self.vessel

        // Create a Console
        self.console = glib::display::Display()
        let con = self.console.value
        con.start(self)

        // Set up mission parameters
        self.start_time = current_time()
        self.stage_count = self.vessel.staging.total_count
        self.check_stages()
        self.new_stage(false)

        // Some vessel configuration
        vessel.autopilot.enabled = true
        vessel.autopilot.mode = AutopilotMode.Prograde
        vessel.actions.light = true

        con.log(" ")

        // Return the console
        return con
    }

    fn end(self) -> Unit = {
        let con  = self.console.value
        let t = glib::display::pretty_time(current_time()-self.start_time)
        let s = format("{0} ended after {1} s", (self.name,t))
        con.log(s)
    }

    fn stage(self)-> Unit = {
        sleep(1)
        self.vessel.staging.next()
        sleep(2)
        self.new_stage(true)
    }
}

