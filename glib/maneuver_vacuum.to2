//
// Maneuver functions
//

use { Vessel, AutopilotMode, VesselSituation, DeltaVSituation  } from ksp::vessel
use { Body, Orbit } from ksp::orbit
use { vec2, vec3, Vec3 } from ksp::math
use { CONSOLE } from ksp::console
use { sleep, current_time, wait_until, yield } from ksp::game
use { warp_to } from ksp::game::warp

use { acos_deg, clamp, sqrt, PI, min, max } from core::math
use { format } from core::str

use { Mission } from glib::mission
use { pretty_time, warning, panic } from glib::display

//
// Maneuver Node and helper functions
//

pub struct Node(t : float, dv : Vec3) {
    time: float = t
    delta_v: Vec3 = dv
}

impl Node {

    // Is this a good/bad Node
    sync fn isError(self) -> bool = {
        if (self.time == -1) return true
        false
    }

    sync fn isValid(self) -> bool = {
        if (self.time == -1) return false
        true
    }

    sync fn split(self, n: Node, p: float) -> Node = {
        return Node(n.time,p*n.delta_v)
    }   

    // Estimate burn time for the node. Assume all in a single (current) stage
    sync fn estBurnTime(self, vessel: Vessel) -> float = {
        const maybe_stage_info = vessel.delta_v.stage(vessel.staging.current)
        if(!maybe_stage_info.defined) return -1

        const stage_info = maybe_stage_info.value
        const stage_deltav = stage_info.get_deltav(DeltaVSituation.Vaccum)
        if (stage_deltav < self.delta_v.magnitude) {
            warning(format("Insufficient dv: {0:N1} m/s need {1:N1} m/s", (stage_deltav, self.delta_v.magnitude)))
            return 120    
        }

        const stage_thrust = stage_info.get_thrust(DeltaVSituation.Vaccum)

        return min(self.delta_v.magnitude/(stage_thrust/vessel.mass), stage_info.burn_time)
    }

    sync fn to_string(self) -> string = {
        let t = glib::display::pretty_time(self.time-current_time())
        return format("dt: {0}  dV: {1:N1} m/s", (t,self.delta_v.magnitude))    
    }

}

// Returns an invalid node
pub sync fn ErrorNode() -> Node = {
    return Node(-1, vec3(1,2,3))
}

//
// Functions for simple orbit adjustments
//

// Time needed for Hohmann transfer from alt1->alt2

pub sync fn t_hohmann(orbit : Orbit, alt1: float, alt2: float) -> float = {
    let body_radius = 1.0 // XXX
    let body_mu = orbit.reference_body.grav_parameter
    return PI * sqrt( (alt1+alt2+2*body_radius)^3/(8*body_mu) )
}

// Velocity at a specific altitude for current orbit.

pub sync fn vv_alt(orbit: Orbit, r: float) -> float = { 
  let body = orbit.reference_body
  return sqrt(body.grav_parameter*(2/(r+body.radius)-1/orbit.semi_major_axis))
}

// Velocity at a specific altitude for an arbitrary orbit

pub sync fn vv_axis(orbit: Orbit, r: float, axis: float) -> float = {
  let body = orbit.reference_body
  return sqrt(body.grav_parameter*(2/(r+body.radius)-1/axis))
}

// Velocity for a circular orbit at a given altitude AGL

pub sync fn vv_circular(orbit: Orbit, r: float) -> float = {
  return vv_axis(orbit, r, r+orbit.reference_body.radius)
}

// Chage the Periapsis at the next Apoapsis

pub sync fn change_pe_at_ap(vessel: Vessel, new_pe: float) -> Node = {
    let t_ap = vessel.orbit.next_apoapsis_time()
    let ap = vessel.orbit.apoapsis
    if (!t_ap.defined || !ap.defined) {
        panic("Apoapsis undefined in change_pe_at_ap.")
        return ErrorNode()
    }
    let v_ap = vv_alt(vessel.orbit,ap.value)
    let v_new = vv_axis(vessel.orbit,ap.value,(ap.value+2*vessel.orbit.reference_body.radius+new_pe)/2)
    let dv = (v_new-v_ap)*vessel.orbit.horizontal(t_ap.value)
    return Node(t_ap.value,dv)
}

pub sync fn change_ap_at_pe(vessel: Vessel, pe: float) -> Node = {
    return ErrorNode() 
}

pub sync fn circularize_at_ap(vessel: Vessel) -> Node = {
    if (!vessel.orbit.apoapsis.defined) {
        panic("Apoapsis undefined in circualize_at_ap.")
        return ErrorNode()
    }
    return change_pe_at_ap(vessel, vessel.orbit.apoapsis.value)    
}

pub sync fn circularize_at_pe(vessel: Vessel) -> Node = {
    return ErrorNode()    
}

// Burn a node in the Vacuum. This is surprisingly hard.

pub fn burnNextNodeVac(mission: Mission) -> Unit = {
    let con  = mission.console.value
    let vessel = mission.vessel
    let orbit = vessel.orbit
    const node_result = vessel.maneuver.next_node()

    if (!node_result.success) {
        warning("Called burn_node with no maneuver node set.")
        return
    }

    if (mission.stage_thrust == 0) {
        panic("Calling burnNextNode with zero thrust!")
        return
    }

    const node = node_result.value
    const target_orbit = node.expected_orbit
    const frame = vessel.main_body.celestial_frame
    let t_end = node.time + node.burn_duration

    // Need code here to orient vessel first
    warp_to(node.time - 10)
    vessel.autopilot.enabled = true
    vessel.autopilot.mode = AutopilotMode.Maneuver
    wait_until(fn() -> node.ETA <= 0.2)

    let t = current_time()

    let dv_min = 10E35
    let stop = false
    let throttle = 0.01
    let dv_total = node.global_burn_vector.vector
    let dv = dv_total
    let burn_time = node.burn_duration

    con.log(format("Vacuum burn dv: {0:N0} m/s  dt: {1}", (dv_total.magnitude, pretty_time(burn_time))))
    const t_start = current_time()

    while (!stop && dv.magnitude > 0.1 ) {
        t = current_time()
        dv = target_orbit.global_velocity(t).to_relative(frame) - vessel.orbit.global_velocity(t).to_relative(frame)
        burn_time = dv.magnitude/(mission.stage_thrust/vessel.mass)
        throttle = clamp(burn_time, 0.01,1.0)

        if( mission.flameout() ) {
            con.log("Flameout.")
            vessel.set_throttle(0)
            mission.stage() 
            t_end += 5      
        }

        if (t > t_end+5) {
            con.log("  stop burn due to time exceeded.")
            stop = true
        }

        if (dv.magnitude > dv_min*1.1) {
            con.log(format("  stop burn due to dv increase dv: {0:N1} m/s",(dv.magnitude)))
            stop=true 
        }
        dv_min = min(dv.magnitude,dv_min)

        con.h4 = format("Node Burn: {0:N1} s ({1:P1})   dV: {2:N2} ({3:P1})  throttle: {4}", 
                        (burn_time,burn_time/node.burn_duration, dv.magnitude, dv.magnitude/dv_total.magnitude, throttle) )

        if (!stop) {
            vessel.set_throttle(throttle)
            sleep(0.1)
            con.update_slow()
        }
    }

    vessel.set_throttle(0)
    yield()
    con.log(format("  ended after {0}  dv_err: {1:N1} ({2:P1})", (pretty_time(current_time()-t_start), dv.magnitude, dv.magnitude/dv_total.magnitude)))
    vessel.autopilot.mode = AutopilotMode.Prograde
    sleep(0.5)
    node.remove()
    sleep(0.5)
}