use { Vessel, AutopilotMode } from ksp::vessel
use { CONSOLE } from ksp::console
use { vec2, vec3, Vec3 } from ksp::math
use { sleep, current_time } from ksp::game
use { acos_deg, max, clamp } from core::math
use { format } from core::str
use { Mission } from glib::mission

// Maneuver Node
struct Node(dv : Vec3, t : float ) {
    delta_v: Vec3 = dv
    time: float = t
}

// Functions for simple orbit adjustments
// WIP
pub fn change_pe_at_ap(vessel: Vessel, pe: float) -> Node = {
    Node(vec3(1,2,3), 1)
}

pub fn change_ap_at_pe(vessel: Vessel, pe: float) -> Node = {
    Node(vec3(1,2,3), 1)    
}

pub fn circularize_at_ap(vessel: Vessel) -> Node = {
    Node(vec3(1,2,3), 1)    
}

pub fn circularize_at_pe(vessel: Vessel) -> Node = {
    Node(vec3(1,2,3), 1)    
}

pub fn main_flight(vessel: Vessel) -> Unit = {

    // Standard Setup
    let mission = Mission("Test Flight v1",vessel)
    let con = mission.start()

    con.log("Launch.")
    vessel.set_throttle(1)
    mission.stage()

    let turn_min = 0.007
    let turn_max = 0.6
    let target_apoapsis = 80000
    let heading = 90

    // calculate gravity turn altitures
    let ath_depth = vessel.main_body.atmosphere_depth
    let turn_min_alt = ath_depth * turn_min
    let turn_max_alt = ath_depth * turn_max

    con.log(format("Target Apoapsis {0:N}, heading {1:N} deg.", (target_apoapsis, heading)))
    con.h4 = format("Gravity turn starting at {0:N}m", turn_min_alt)

    vessel.autopilot.mode = AutopilotMode.Autopilot

    // Phase one: burn until trajectory is close to apoapsis
    while(vessel.orbit.apoapsis.value < target_apoapsis) {

        // Check if high enough for gravity turn
        if (vessel.altitude_sealevel > turn_min_alt) {
            let pitch = acos_deg(clamp((vessel.altitude_sealevel - turn_min_alt) / (turn_max_alt-turn_min_alt), 0, 1))
            vessel.autopilot.target_orientation = vessel.heading_direction(heading, pitch, 0).vector
            con.h4 = format("Launch: {0:P1}  pitch: {1:N1} deg", (vessel.altitude_sealevel/target_apoapsis, pitch))
        }

        // Check if we need to stage
        if( mission.flameout() ) {
            con.log("Flameout, advancing to new stage.")
            sleep(1)
            mission.stage()       
        }
        con.update1()
    }

    vessel.set_throttle(0)
    vessel.autopilot.mode = AutopilotMode.Prograde

    let t_apo = vessel.orbit.next_apoapsis_time().value
    con.log(format("Apoapsis {0:N} in {1:N} seconds.", (vessel.orbit.apoapsis.value, t_apo-current_time())))

    mission.end()
}